# Copyright (c) 2017-2018 Intel Corporation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function Sscal {
    params {
        int n,
        float alpha,
        blob inout float x,
        int incx
    },
    implementations {
        naive,
        noinc
    }
}

function copy_interleave {
    params {
        blob input void src,
        blob inout void dst,
        int num,
        int elem_size,
        int src_pad,
        int dst_pad
    },
    implementations {
        naive,
        dwords
    }
}

function Saxpy {
    params {
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob inout float y,
        int incy
    },
    implementations {
        naive,
        noinc,
        noincx,
        noincy
    }
}

function Snrm2 {
    params {
        blob output float result,
        int n,
        blob input float x,
        int incx
    },
    implementations {
        naive,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage,
        simd16_two_stage_noinc
    }
}

function Srotmg {
    params {
        blob inout float d1,
        blob inout float d2,
        blob inout float b1,
        float b2,
        blob output float result
    },
    implementations {
        naive
    }
}

function Isamax {
    params {
        int n,
        blob input float x,
        int incx,
        blob output int result
    },
    implementations {
        naive,
        opt_1
    }
}

function Isamin {
    params {
        int n,
        blob float x,
        int incx,
        blob int result
    },
    implementations {
        naive,
        opt_2stage
    }
}

function swap_interleave {
    params {
        int n,
        blob inout void x,
        int incx,
        blob inout void y,
        int incy,
        int elem_size
    },
    implementations {
        naive,
        dwords,
        qwords
    }
}

function Srot {
    params {
        int n,
        blob inout float x,
        int incx,
        blob inout float y,
        int incy,
        float c,
        float s
    },
    implementations {
        naive,
        async,
        noinc,
        noincx,
        noincy
    }
}

function Srotm {
    params {
        int n,
        blob inout float x,
        int incx,
        blob inout float y,
        int incy,
        blob input float param
    },
    implementations {
        naive,
        async,
        noinc
    }
}

function Sasum {
    params {
        int n,
        blob input float x,
        int incx,
        blob output float result
    },
    implementations {
        naive,
        slm_reduction,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage,
        simd16_two_stage_noinc
    }
}

function Srotg {
    params {
        blob inout float a,
        blob inout float b,
        blob output float c,
        blob output float s
    },
    implementations {
        naive
    }
}

function Sdot {
    params {
        int n,
        blob input float x,
        int incx,
        blob input float y,
        int incy,
        blob output float result
    },
    implementations {
        naive,
        opt_6
    }
}

function Strsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input float A,
        int lda,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Stbsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        int k,
        blob input float A,
        int lda,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Stpsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input float ap,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Sger {
    params {
        int m,
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob input float y,
        int incy,
        blob inout float A,
        int lda
    },
    implementations {
        naive,
        no_inc
    }
}

function Ssyr2 {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob input float y,
        int incy,
        blob inout float A,
        int lda
    },
    implementations {
        naive_upper,
        naive_lower
    }
}

function Ssyr {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob inout float A,
        int lda
    },
    implementations {
        naive
    }
}

function Strmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input float A,
        int lda,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Stbmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        int k,
        blob input float A,
        int lda,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Sgbmv {
    params {
        int trans,
        int m,
        int n,
        int kl,
        int ku,
        float alpha,
        blob input float A,
        int lda,
        blob input float x,
        int incx,
        float beta,
        blob inout float y,
        int incy
    },
    implementations {
        trans,
        ntrans
    }
}

function Stpmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input float AP,
        blob inout float x,
        int incx
    },
    implementations {
        naive
    }
}

function Ssbmv {
    params {
        int uplo,
        int n,
        int k,
        float alpha,
        blob input float A,
        int lda,
        blob input float x,
        int incx,
        float beta,
        blob inout float y,
        int incy
    },
    implementations {
        naive
    }
}

function Sspmv {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float AP,
        blob input float x,
        int incx,
        float beta,
        blob inout float y,
        int incy
    },
    implementations {
        naive
    }
}

function Ssymm {
    params {
        int side,
        int uplo,
        int m,
        int n,
        float alpha,
        blob input float A,
        int lda,
        blob input float B,
        int ldb,
        float beta,
        blob inout float C,
        int ldc
    },
    implementations {
        naive,
        simd1_16x16_left_up
    }
}

function Ssyrk {
    params {
        int uplo,
        int trans,
        int n,
        int k,
        float alpha,
        blob input float A,
        int lda,
        float beta,
        blob inout float C,
        int ldc
    },
    implementations {
        naive
    }
}

function Ssyr2k {
    params {
        int uplo,
        int trans,
        int n,
        int k,
        float alpha,
        blob input float A,
        int lda,
        blob input float B,
        int ldb,
        float beta,
        blob inout float C,
        int ldc
    },
    implementations {
        naive
    }
}

function Sspr2 {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob input float y,
        int incy,
        blob inout float AP
    },
    implementations {
        naive_upper,
        naive_lower
    }
}

function Sspr {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float x,
        int incx,
        blob inout float AP
    },
    implementations {
        naive_upper,
        naive_lower
    }
}

function Ssymv {
    params {
        int uplo,
        int n,
        float alpha,
        blob input float A,
        int lda,
        blob input float x,
        int incx,
        float beta,
        blob inout float y,
        int incy
    },
    implementations {
        naive_upper,
        naive_lower
    }
}

function Sgemv {
    params {
        int trans,
        int m,
        int n,
        float alpha,
        blob input float A,
        int lda,
        blob input float x,
        int incx,
        float beta,
        blob inout float y,
        int incy
    },
    implementations {
        naive,
        naive_async
    }
}

function Sgemm {
    params {
        int transa,
        int transb,
        int m,
        int n,
        int k,
        float alpha,
        blob input float A,
        int lda,
        blob input float B,
        int ldb,
        float beta,
        blob inout float C,
        int ldc
    },
    implementations {
        naive,
        async,
        transAB,
        ntransAB,
        transA_ntransB,
        ntransA_transB
    }
}

function Strsm {
    params {
        int side,
        int uplo,
        int trans,
        int diag,
        int m,
        int n,
        float alpha,
        blob input float A,
        int lda,
        blob inout float B,
        int ldb
    },
    implementations {
        naive
    }
}

# BLAS Level-1 Complex
function Cscal {
    params {
        int n,
        complex alpha,
        blob inout complex x,
        int incx
    },
    implementations {
        naive,
        noinc
    }
}

function Cdotu {
    params {
        int n,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob output complex result
    },
    implementations {
        naive,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage
    }
}

# BLAS Level-1 Complex
function Scnrm2 {
    params {
        int n,
        blob input complex x,
        int incx,
        blob output float result
    },
    implementations {
        naive,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage
    }
}

function Icamax {
    params {
        int n,
        blob input complex x,
        int incx,
        blob output int result
    },
    implementations {
        naive,
        opt_2stage
    }
}

function Icamin {
    params {
        int n,
        blob complex x,
        int incx,
        blob int result
    },
    implementations {
        naive,
        opt_2stage
    }
}

function Caxpy {
    params {
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob inout complex y,
        int incy
    },
    implementations {
        naive,
        noincx,
        noincy,
        noinc
    },
    impl_type: command
}

function Scasum {
    params {
        int n,
        blob complex x,
        int incx,
        blob float result
    },
    implementations {
        naive,
        naive_noincx,
        opt_locmem,
        opt_small_input,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage
    }
}

function Crotg {
    params {
        blob inout complex a,
        blob inout complex b,
        blob output float c,
        blob output complex s
    },
    implementations {
        naive
    }
}

# BLAS Level 2 Complex
function Cgbmv {
    params {
        int trans,
        int m,
        int n,
        int kl,
        int ku,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex x,
        int incx,
        complex beta,
        blob inout complex y,
        int incy
    },
    implementations {
        ntrans,
        trans,
        conjg
    }
}

# BLAS Level-2 Complex
function Cgeru {
    params {
        int m,
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob inout complex A,
        int lda
    },
    implementations {
        naive
    }
}

# BLAS Level-2 Complex
function Cgerc {
    params {
        int m,
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob inout complex A,
        int lda
    },
    implementations {
        naive
    }
}

# BLAS Level 2 Complex
function Cgemv {
    params {
        int transa,
        int m,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex x,
        int incx,
        complex beta,
        blob inout complex y,
        int incy
    },
    implementations {
        naive
    }
}

function Strmm {
    params {
        int side,
        int uplo,
        int transa,
        int diag,
        int m,
        int n,
        float alpha,
        blob inout float A,
        int lda,
        blob inout float B,
        int ldb,
            blob inout float C,
        int ldc
    },
    implementations {
        naive
    }
}


# BLAS Level-2 Complex
function Cher {
    params {
        int uplo,
        int n,
        float alpha,
        blob input complex x,
        int incx,
        blob inout complex A,
        int lda
    },
    implementations {
        naive
    }
}

# BLAS Level-2 Complex
function Chemv {
    params {
        int uplo,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex x,
        int incx,
        complex beta,
        blob inout complex y,
        int incy
    },
    implementations {
        naive
    }
}

# BLAS Level-2 Complex
function Ctrmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input complex A,
        int lda,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}

function Cdotc {
    params {
        int n,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob output complex result
    },
    implementations {
        naive,
        simd16_single_thread,
        simd16x16,
        simd16_two_stage
    }
}

function Crot {
    params {
        int n,
        blob inout complex x,
        int incx,
        blob inout complex y,
        int incy,
        float c,
        complex s
    },
    implementations {
        naive,
        async,
        noinc,
        noincx,
        noincy
    }
}

function Csrot {
    params {
        int n,
        blob inout complex x,
        int incx,
        blob inout complex y,
        int incy,
        float c,
        float s
    },
    implementations {
        naive,
        async,
        noinc,
        noincx, 
        noincy
    }
}

# BLAS Level 2 Complex
function Cher2 {
    params {
        int uplo,
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob inout complex A,
        int lda
    },
    implementations {
        naive
    }
}

function Chpmv {
    params {
        int uplo,
        int n,
        complex alpha,
        blob input complex AP,
        blob input complex x,
        int incx,
        complex beta,
        blob inout complex y,
        int incy
    },
    implementations {
        naive
    }
}

function Chpr {
    params {
        int uplo,
        int n,
        float alpha,
        blob input complex x,
        int incx,
        blob inout complex AP
    },
    implementations {
        naive
    }
}

function Chpr2 {
    params {
        int uplo,
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob input complex y,
        int incy,
        blob inout complex AP
    },
    implementations {
        naive
    }
}

function Ctpmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input complex AP,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}

# BLAS Level-2 Complex
function Ctbmv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        int k,
        blob input complex A,
        int lda,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}

function Ctbsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        int k,
        blob input complex A,
        int lda,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}

function Ctrsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input complex A,
        int lda,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}


# BLAS Level-3 Complex
function Cgemm {
    params {
        int transa,
        int transb,
        int m,
        int n,
        int k,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        complex beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

function Csymm {
    params {
        int side,
        int uplo,
        int m,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        complex beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

function Csyr2k {
    params {
        int uplo,
        int trans,
        int n,
        int k,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        complex beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

function Csyrk {
    params {
        int uplo,
        int trans,
        int n,
        int k,
        complex alpha,
        blob input complex A,
        int lda,
        complex beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

function Ctpsv {
    params {
        int uplo,
        int trans,
        int diag,
        int n,
        blob input complex AP,
        blob inout complex x,
        int incx
    },
    implementations {
        naive
    }
}

function Ctrsm {
    params {
        int side,
        int uplo,
        int trans,
        int diag,
        int m,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob inout complex B,
        int ldb
    },
    implementations {
        naive
    }
}

# BLAS Level-3 Complex
function Cherk {
    params {
        int uplo,
        int trans,
        int n,
        int k,
        float alpha,
        blob input complex A,
        int lda,
        float beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

# BLAS Level-3 Complex
function Cher2k {
    params {
        int uplo,
        int trans,
        int n, 
        int k,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        float beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

# BLAS Level-3 Complex
function Ctrmm {
    params {
        int side,
        int uplo,
        int transa,
        int diag,
        int m,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

function Chemm {
    params {
        int side,
        int uplo,
        int m,
        int n,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex B,
        int ldb,
        complex beta,
        blob inout complex C,
        int ldc
    },
    implementations {
        naive
    }
}

# BLAS Level 2 Complex
function Chbmv {
    params {
        int uplo,
        int n,
        int k,
        complex alpha,
        blob input complex A,
        int lda,
        blob input complex x,
        int incx,
        complex beta,
        blob inout complex y,
        int incy
    },
    implementations {
        naive
    }
}

function Csyr {
    params {
        int uplo,
        int n,
        complex alpha,
        blob input complex x,
        int incx,
        blob inout complex A,
        int lda
    },
    implementations {
        naive
    }
}
